{"version":3,"sources":["Component/Header.js","Component/Content/Chart.js","Component/Content.js","Component/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","placeholder","style","flex","color","Component","Chart","chartInfo","this","props","console","log","src","url","alt","Content","state","charts","fetch","headers","Authorization","then","res","json","data","setState","catch","err","slice","renderChart","map","chartItem","key","Object","values","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAIaA,EAAb,iLAEI,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,gBACb,kBAAC,IAAD,MADF,OAEE,wCAEF,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,aACb,2BAAOC,YAAY,eAAeC,MAAO,CAAEC,KAAM,KACjD,yBAAKH,UAAU,gBAAe,kBAAC,IAAD,QAEhC,yBAAKE,MAAO,CAAEE,MAAO,YAArB,kBAbV,GAA4BC,aCabC,EAff,iLAGI,IAAMC,EAAYC,KAAKC,MAAMF,UAE7B,OADAG,QAAQC,IAAIJ,GAEV,yBAAKP,UAAU,SACb,yBAAKY,IAAKL,EAAU,GAAG,GAAGM,IAAKC,IAAKP,EAAU,KAC9C,2BAAIA,EAAU,SARtB,GAA2BF,aCCdU,EAAb,YACE,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CACXC,OAAQ,IAHO,EADrB,iFAQuB,IAAD,OAClBC,MAAM,iDAAkD,CACtDC,QAAS,CACPC,cAAc,qCAGfC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAAER,OAAQO,EAAKA,UAE9BE,OAAM,SAAAC,GACLjB,QAAQC,IAAIgB,QAnBpB,+BAwBI,IAAIV,EAAST,KAAKQ,MAAMC,OAAOW,MAAM,EAAG,IAGxC,GAFAlB,QAAQC,IAAIM,GAEG,KAAXA,EACF,OAAO,6CAGT,IAAMY,EAAcZ,EAAOa,KAAI,SAAAC,GAAS,OACtC,kBAAC,EAAD,CAAOC,IAAKC,OAAOC,OAAOH,GAAW,GAAIxB,UAAW0B,OAAOC,OAAOH,QAGpE,OACE,yBAAK/B,UAAU,WACb,kDACA,yBAAKA,UAAU,gBACZ6B,QAvCX,GAA6BxB,aCQd8B,EATf,iLAEI,OACE,4BAAQnC,UAAU,UAAlB,cAHN,GAA4BK,aCqBb+B,E,iLAXX,OACE,yBAAKpC,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAPUK,aCGEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.f8df7d22.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { FiHeadphones, FiSearch } from \"react-icons/fi\";\r\n\r\n\r\nexport class Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div className=\"header-title\">\r\n          <FiHeadphones />&nbsp;\r\n          <span>Music</span>\r\n        </div>\r\n        <div className=\"header-searchbox\">\r\n          <div className=\"searchbox\">\r\n            <input placeholder=\"Search......\" style={{ flex: 5 }} />\r\n            <div className=\"searchButton\"><FiSearch /></div>\r\n          </div>\r\n          <div style={{ color: '#b9b7b7'}}>About Me</div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport class Chart extends Component {\r\n\r\n  render() {\r\n    const chartInfo = this.props.chartInfo;\r\n    console.log(chartInfo);\r\n    return (\r\n      <div className=\"chart\">\r\n        <img src={chartInfo[4][0].url} alt={chartInfo[1]} />\r\n        <p>{chartInfo[1]}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Chart;","import React, { Component } from 'react';\r\nimport Chart from './Content/Chart';\r\n\r\nexport class Content extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      charts: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://api.kkbox.com/v1.1/charts?territory=TW', {\r\n      headers: {\r\n        Authorization: `Bearer Jb6JeHDqKMz6gcm3b-b4KA==`\r\n      }\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({ charts: data.data })\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  render() {\r\n    let charts = this.state.charts.slice(0, 18);\r\n    console.log(charts);\r\n\r\n    if (charts === '') {\r\n      return <div>Loading.....</div>\r\n    }\r\n\r\n    const renderChart = charts.map(chartItem =>\r\n      <Chart key={Object.values(chartItem)[0]} chartInfo={Object.values(chartItem)} />\r\n    );\r\n\r\n    return (\r\n      <div className=\"content\">\r\n        <h2>排行榜</h2>\r\n        <div className=\"content-part\">\r\n          {renderChart}\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport class Footer extends Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"footer\" >Footer</footer>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Footer;","import React, { Component } from 'react';\nimport './style/style.css';\nimport './style/reset.css';\n\nimport { Header } from './Component/Header';\nimport { Content } from './Component/Content'\nimport Footer from './Component/Footer';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header />\n        <Content />\n        <Footer />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}